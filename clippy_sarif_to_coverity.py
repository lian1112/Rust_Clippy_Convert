import json
import argparse
import os

def parse_sarif_file(sarif_file):
    with open(sarif_file, "r") as f:
        sarif_data = json.load(f)
    return sarif_data

def convert_sarif_to_coverity(sarif_data):
    sources = set()
    issues = []
    issue_set = set()
    for run in sarif_data["runs"]:
        tool_name = run["tool"]["driver"]["name"]
        for result in run["results"]:
            file_path = result["locations"][0]["physicalLocation"]["artifactLocation"]["uri"]
            file_path = os.path.abspath(file_path)
            sources.add(file_path)

            start_line = result["locations"][0]["physicalLocation"]["region"]["startLine"]
            rule_id = result["ruleId"]
            level = result["level"]
            description = result["message"]["text"]

            issue_key = (file_path, start_line, rule_id, level, description)
            if issue_key not in issue_set:
                issue_set.add(issue_key)
                issue = {
                    "checker": rule_id,
                    "extra": f"{rule_id}_extra",
                    "file": file_path,
                    "subcategory": "small-mistakes",
                    "events": [
                        {
                            "tag": f"{rule_id}_tag",
                            "description": description,
                            "line": start_line,
                        }
                    ],
                }
                issues.append(issue)

    return list(sources), issues

def write_coverity_file(sources, issues, output_file):
    output_data = {
        "header": {
            "version": 1,
            "format": "cov-import-results input"
        },
        "sources": [{"file": source, "encoding": "ASCII"} for source in sources],
        "issues": issues,
    }
    with open(output_file, "w") as f:
        json.dump(output_data, f, indent=4)

def main():
    parser = argparse.ArgumentParser(description="Convert clippy-sarif output to Coverity intermediate format.")
    parser.add_argument("input", help="Input SARIF file generated by clippy-sarif.")
    parser.add_argument("output", help="Output file for Coverity intermediate format.")
    args = parser.parse_args()

    sarif_data = parse_sarif_file(args.input)
    sources, issues = convert_sarif_to_coverity(sarif_data)
    write_coverity_file(sources, issues, args.output)

if __name__ == "__main__":
    main()
